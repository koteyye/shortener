// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/koteyye/shortener/internal/app/models"
)

// MockShortener is a mock of Shortener interface.
type MockShortener struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerMockRecorder
}

// MockShortenerMockRecorder is the mock recorder for MockShortener.
type MockShortenerMockRecorder struct {
	mock *MockShortener
}

// NewMockShortener creates a new mock instance.
func NewMockShortener(ctrl *gomock.Controller) *MockShortener {
	mock := &MockShortener{ctrl: ctrl}
	mock.recorder = &MockShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortener) EXPECT() *MockShortenerMockRecorder {
	return m.recorder
}

// AddShortURL mocks base method.
func (m *MockShortener) AddShortURL(ctx context.Context, url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShortURL", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddShortURL indicates an expected call of AddShortURL.
func (mr *MockShortenerMockRecorder) AddShortURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShortURL", reflect.TypeOf((*MockShortener)(nil).AddShortURL), ctx, url)
}

// Batch mocks base method.
func (m *MockShortener) Batch(ctx context.Context, originalList []*models.OriginURLList) ([]*models.URLList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Batch", ctx, originalList)
	ret0, _ := ret[0].([]*models.URLList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Batch indicates an expected call of Batch.
func (mr *MockShortenerMockRecorder) Batch(ctx, originalList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockShortener)(nil).Batch), ctx, originalList)
}

// GetOriginURL mocks base method.
func (m *MockShortener) GetOriginURL(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginURL", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginURL indicates an expected call of GetOriginURL.
func (mr *MockShortenerMockRecorder) GetOriginURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginURL", reflect.TypeOf((*MockShortener)(nil).GetOriginURL), ctx, shortURL)
}

// GetShortURLFromOriginal mocks base method.
func (m *MockShortener) GetShortURLFromOriginal(ctx context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURLFromOriginal", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLFromOriginal indicates an expected call of GetShortURLFromOriginal.
func (mr *MockShortenerMockRecorder) GetShortURLFromOriginal(ctx, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURLFromOriginal", reflect.TypeOf((*MockShortener)(nil).GetShortURLFromOriginal), ctx, originalURL)
}

// PingDB mocks base method.
func (m *MockShortener) PingDB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDB indicates an expected call of PingDB.
func (mr *MockShortenerMockRecorder) PingDB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDB", reflect.TypeOf((*MockShortener)(nil).PingDB), ctx)
}
